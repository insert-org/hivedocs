datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Admin
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(User)
  //
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  //
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model Author {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  //
  name      String    @unique
  resume    String    @default("")
  image     String?
  //
  approved  Boolean   @default(false)
  //
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  //
  articles  Article[]
}

model Article {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  title     String
  year      Int
  resume    String
  views     Int      @default(0)
  image     String?
  //
  approved  Boolean  @default(false)
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  reviews   Review[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  content   String
  rating    Float
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  //
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
}
